//
//  CommentsViewController.swift
//  perhapsARedditClient
//
//  Created by a on 19.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com

import UIKit

protocol CommentsDisplayLogic: AnyObject {
    func dismiss(viewModel: Comments.dismiss.ViewModel)
    func displayComments(viewModel: Comments.getComments.ViewModel)
}

final class CommentsViewController: UIViewController {
    // MARK: - Clean Components
    
    private var interactor: CommentsBusinessLogic?
    private var router: (CommentsRoutingLogic & CommentsDataPassing)?
 
    // MARK: - Fields
    
    private var dataSource = [CommentForTable]()
    var commentUrlString = ""
    
    // MARK: - View

    @IBOutlet var tableView: UITableView!
    @IBOutlet var indicator: UIActivityIndicatorView!
    
    
    // MARK: - config
    
    func config() {
        let presenter = CommentsPresenter()
        let api = APIManager()
        let worker = CommentsWorker(apiManager: api)
        let interactor = CommentsInteractor(presenter: presenter, worker: worker)
        let router = CommentsRouter()
        self.interactor = interactor
        self.router = router
        router.viewController = self
        presenter.viewController = self
        router.viewController = self
    }
    
    // MARK: viewDidLoad
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableConfiguration()
        interactor?.getComments(request: Comments.getComments.Request(urlString: commentUrlString))
    }
    //MARK: - setup
    
    func tableConfiguration() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UINib(nibName: "TableViewCellTypeComment", bundle: nil), forCellReuseIdentifier: "TableViewCellTypeComment")
        tableView.reloadData()
    }
    
    //MARK: - Actions
    
    @IBAction func tappedCloseView(_ sender: Any) {
        dismiss(viewModel: Comments.dismiss.ViewModel())
    }
    
    //MARK: - functions
    
    private func setTableData(data: [CommentForTable]) {
        self.dataSource = data
        indicator.stopAnimating()
        tableView.reloadData()
    }
}

// MARK: - DisplayLogic

extension CommentsViewController: CommentsDisplayLogic {
    func dismiss(viewModel: Comments.dismiss.ViewModel) {
        router?.dismissSelf()
    }
    
    func displayComments(viewModel: Comments.getComments.ViewModel) {
        setTableData(data: viewModel.commentForTable)
    }
        
}

// MARK: - UITableViewDataSource & UITableViewDelegate

extension CommentsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let model = dataSource[indexPath.row]
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "TableViewCellTypeComment", for: indexPath) as! TableViewCellTypeComment
        cell.config(user: model.auther, bodyText: model.body, votes: model.ups)
        
        return cell
    }
    
}
