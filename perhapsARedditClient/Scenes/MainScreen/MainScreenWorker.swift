//
//  MainScreenWorker.swift
//  perhapsARedditClient
//
//  Created by a on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainScreenWorkerLogic {
    func fetchPosts(after: String?) async throws -> RedditPosts
    func getSubreddit() async -> String
    func getHiddenPosts() async -> [String]
    func getIconUrl(from: String) async -> String
    func loadImageFrom(urlString: String) async throws -> UIImage?
    func loadGifFrom(urlString: String) async throws -> UIImage?
    func getUIimageDimentions(urlString: String) -> [CGFloat]
    func getVideoResolution(url: String) -> [CGFloat]
}

final class MainScreenWorker: MainScreenWorkerLogic {
    // MARK: - Fields
    
    private var api: APIManager
    
    init(apiManager: APIManager) {
        self.api = apiManager
    }
    
    // MARK: - Methods
    
    func fetchPosts(after: String?) async throws -> RedditPosts {
        let sub = try await api.getUserDefaults(Key: "subreddit", type: String.self)
        let time = try await api.getUserDefaults(Key: "timePeriod", type: String.self)
        var urlString = "https://www.reddit.com/r/\(sub ?? "pics")/top/.json?t=\(time ?? "month")&limit=\(100)"
        if let postId = after {
            urlString = "https://www.reddit.com/r/\(sub ?? "pics")/top/.json?t=\(time ?? "month")&limit=\(100)&after=\(postId)"
        }
        return try await api.fetchData(urlString: urlString, decodingType: RedditPosts.self)
    }
    
    func getSubreddit() async -> String {
        do {
            return try await api.getUserDefaults(Key: "subreddit", type: String.self) ?? "pics"
        } catch  { print("err/getSubreddit"); return "pics" }
    }
    
    func getHiddenPosts() async -> [String] {
        do {
            return try await api.getUserDefaults(Key: "hiddenPosts", type: [String].self) ?? []
        } catch  { print("err/getHiddenPosts"); return [] }
    }
    
    func getIconUrl(from: String) async -> String {
        var urlString = "https://www.reddit.com/favicon.ico"
        
        do {
            let data = try await api.fetchData(urlString: "https://www.reddit.com/r/\(from)/about.json" , decodingType: About.self).data
            
            if data.icon_img != "" {
                urlString = data.icon_img
            } else { urlString = data.community_icon }
        } catch { print("err/getIconUrl") }

        urlString = removeExtraUrlString(url: urlString, extensionString: ".jpg")
        urlString = removeExtraUrlString(url: urlString, extensionString: ".png")
        urlString = removeExtraUrlString(url: urlString, extensionString: ".ico")

        return urlString
    }
    
    private func removeExtraUrlString(url: String, extensionString: String) -> String {
        var string = url
        if let dotRange = string.range(of: extensionString) {
            string.removeSubrange(dotRange.lowerBound..<string.endIndex)
            string += extensionString
        }
        return string
    }
    
    func loadImageFrom(urlString: String) async throws -> UIImage? {
        return try await api.loadImageFrom(urlString: urlString)
    }
    
    func loadGifFrom(urlString: String) async throws -> UIImage? {
        return try await api.loadGifFrom(urlString: urlString)
    }
    
    func getUIimageDimentions(urlString: String) -> [CGFloat] {
        api.imageDimenssions(url: urlString)
    }
    
    func getVideoResolution(url: String) -> [CGFloat] {
        api.getVideoResolution(url: url)
    }
}
