//
//  MainScreenPresenter.swift
//  perhapsARedditClient
//
//  Created by a on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainScreenPresentationLogic
{
    func presentPosts(response: MainScreen.GetPosts.Response)
    func presentRightSideMenu()
    func presentLeftSideMenu()
}

class MainScreenPresenter: MainScreenPresentationLogic
{
    // MARK: - Clean Components
    
    weak var viewController: MainScreenDisplayLogic?
    
    // MARK: - Methods
    
    private func configureTableModel(from data: [Post]) -> [PostForTable] {
        var tableModel = [PostForTable]()
        
        tableModel.append(contentsOf: data.map {
            PostForTable(
                postTitle: $0.title,
                voteCount: voteCount(score: $0.score),
                picture: $0.thumbnail,
                subredditIcon: $0.thumbnail,
                subreddit: "r/dddddd",
                //            subreddit: "r/\(delegate!.subreddit)"
                oPUsername: "u/\($0.author)",
                timePassed: timePassed(created_utc: $0.created_utc)
            )
            
        })
        return tableModel
    }
    
    func redditPostsToPosts(rawData: RedditPosts) -> [Post] {
        var posts: [Post] = []
        rawData.data.children.forEach { posts += [$0.data] }
        return posts
    }
    
    func timePassed(created_utc: Double) -> String {
        let epocTime = Int(TimeInterval(created_utc))
        let currentTime = Int(Date().timeIntervalSince1970)
        var differance = currentTime - epocTime
        var returnString = ""
        
        if differance / 60 < 60 && differance > 0  {
            returnString = "\(differance / 60)min"
        } else {
            differance = differance / 3600
            if differance < 24 && differance > 0 {
                returnString = "\(differance)h"
            } else {
                differance = differance / 24
                if differance < 30 && differance > 0  {
                    returnString = "\(differance)d"
                } else {
                    differance = differance / 30
                    if differance < 12 && differance > 0  {
                        returnString = "\(differance)m"
                    } else {
                        differance = differance / 12
                        returnString = "\(differance)y"
                    }
                }
            }
        }
        return returnString
    }
    
    func voteCount(score: Int) -> String {
        var returnString = ""
        if score > 999 {
            returnString = "\(round(Double(score)/100)/10)K"
        } else { returnString = "\(score)" }
        return returnString
    }
    
}

// MARK: - CountriesPresentationLogic

extension MainScreenPresenter {
//    func presentSelectedCountry(response: Table.ShowCountryDetails.Response) {
//        viewController?.displaySelectedCountry(viewModel: Table.ShowCountryDetails.ViewModel())
//    }
    
    func presentPosts(response: MainScreen.GetPosts.Response) {
        
        let data = redditPostsToPosts(rawData: response.data)
        let viewModel = configureTableModel(from: data)
        
        viewController?.displayPosts(viewModel: MainScreen.GetPosts.ViewModel(tableData: viewModel))
    }
    
    func presentRightSideMenu() {
        
    }
    
    func presentLeftSideMenu() {
        
    }
    
}

