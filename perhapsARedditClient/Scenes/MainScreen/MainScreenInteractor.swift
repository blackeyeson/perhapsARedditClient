//
//  MainScreenInteractor.swift
//  perhapsARedditClient
//
//  Created by a on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainScreenBusinessLogic {
    func getPosts(request: MainScreen.GetPosts.Request)
    func refreshHiddenPostData(request: MainScreen.refreshHiddenPost.Request)
    func getUIimageDimentions(request: MainScreen.getDimentionsFromURL.Request) -> [CGFloat]
    func getVideoResolution(request: MainScreen.getDimentionsFromURL.Request) -> [CGFloat]
    func getMorePosts(request: MainScreen.addPosts.Request)
}

protocol MainScreenDataStore { }

final class MainScreenInteractor: MainScreenDataStore {
    private let presenter: MainScreenPresentationLogic
    private let worker: MainScreenWorkerLogic
    
    var redditPosts: RedditPosts? = nil
    private var iconURLStrings: [String] = []
    
    // MARK: - Object Lifecycle
    
    init(presenter: MainScreenPresentationLogic, worker: MainScreenWorkerLogic) {
        self.presenter = presenter
        self.worker = worker
    }
}

// MARK: - BusinessLogic

extension MainScreenInteractor: MainScreenBusinessLogic {
    
    func getPosts(request: MainScreen.GetPosts.Request) {
        Task {
            do {
                let redditPosts = try await worker.fetchPosts(after: nil)
                let hiddenPosts = await worker.getHiddenPosts()
                for i in 0..<redditPosts.data.children.count {
                    let subreddit = redditPosts.data.children[i].data.subreddit
                    iconURLStrings += [await worker.getIconUrl(from: subreddit)]
                }
                DispatchQueue.main.async { [weak self] in
                    self?.presenter.presentPosts(response: MainScreen.GetPosts.Response(data: redditPosts, hiddenPosts: hiddenPosts, iconUrlStrings: self?.iconURLStrings ?? []))
                }
            } catch { print(error) }
        }
    }
    
    func refreshHiddenPostData(request: MainScreen.refreshHiddenPost.Request) {
        Task {
            let hiddenPosts = await worker.getHiddenPosts()
            presenter.refreshHiddenPosts(response: MainScreen.refreshHiddenPost.Response(posts: hiddenPosts))
        }
        
    }
    
    func getUIimageDimentions(request: MainScreen.getDimentionsFromURL.Request) -> [CGFloat] {
        let urlString = request.urlString
        return worker.getUIimageDimentions(urlString: urlString)
    }
    
    func getVideoResolution(request: MainScreen.getDimentionsFromURL.Request) -> [CGFloat] {
        let urlString = request.urlString
        return worker.getVideoResolution(url: urlString)
    }
    
    func getMorePosts(request: MainScreen.addPosts.Request) {
        let lastPost = request.lastPost
        Task {
            do {
                let redditPosts = try await worker.fetchPosts(after: lastPost)
                let hiddenPosts = await worker.getHiddenPosts()
                for i in 0..<redditPosts.data.children.count {
                    let subreddit = redditPosts.data.children[i].data.subreddit
                    iconURLStrings += [await worker.getIconUrl(from: subreddit)]
                }
                DispatchQueue.main.async { [weak self] in
                    self?.presenter.presentAddedPosts(response: MainScreen.GetPosts.Response(data: redditPosts, hiddenPosts: hiddenPosts, iconUrlStrings: self?.iconURLStrings ?? []))
                }
            } catch { print(error) }
        }
    }
}
