//
//  LoginViewController.swift
//  perhapsARedditClient
//
//  Created by a on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: AnyObject {
    func login(username: String?, password: String?)
    func dismiss()
}

final class LoginViewController: UIViewController {
    // MARK: - Views
    
    @IBOutlet var myView: UIView!
    
    // MARK: - Clean Components
    
    private let interactor: LoginBusinessLogic
    private let router: LoginRoutingLogic & LoginDataPassing
    
    // MARK: - Fields
    
    @IBOutlet var usernameField: UITextField!
    @IBOutlet var passwordField: UITextField!
    
    // MARK: Object lifecycle
    
    init(interactor: LoginBusinessLogic, router: LoginRoutingLogic & LoginDataPassing) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        myView.layer.cornerRadius = 5
        myView.layer.masksToBounds = true
    }
    
    //MARK: - Actions
    
    @IBAction func back(_ sender: Any) {
        dismiss()
    }
    @IBAction func login(_ sender: Any) {
        login(username: usernameField.text, password: passwordField.text)
    }
    @IBAction func tapOut(_ sender: Any) {
        dismiss()
    }
}

// MARK: - DisplayLogic

extension LoginViewController: LoginDisplayLogic {

    func login(username: String?, password: String?) {
        let bool = interactor.didTapLogin(username: username, password: password)
        if bool {
            self.router.loginSuccessNavigateToMain(username: username)
        } else { print("err/login") }
    }
    
    func dismiss() {
        router.dismissSelf()
    }
}
